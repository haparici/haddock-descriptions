
// Parameters and Variables
var randomVariable= model_data[0]
var visuals = model_data[1]
var descriptions = model_data[2]
var cost = model_data[3][0]
var cont = model_data[4]
var def_art = model_data[5]
var gamma = model_data[6][0]
var costCoefficient = model_data[7][0]
var cmpHighScopeConstrualProb = model_data[8][0]
var posHighScopeConstrualProb = model_data[9][0]
var allowUninformativeThresholds = model_data[10][0]
var listenerLevel = model_data[11][0]



var r1 = [visuals[0]["Animal"][0], visuals[0]["Container"][0], visuals[0]["Size"][0]]
var r2 = [visuals[1]["Animal"][0], visuals[1]["Container"][0], visuals[1]["Size"][0]]
var r3 = [visuals[2]["Animal"][0], visuals[2]["Container"][0], visuals[2]["Size"][0]]
var r4 = [visuals[3]["Animal"][0], visuals[3]["Container"][0], visuals[3]["Size"][0]]
var r5 = [visuals[4]["Animal"][0], visuals[4]["Container"][0], visuals[4]["Size"][0]]
var rU = ["", "", ""]

var referents = [r1, r2, r3, r4, r5, rU]

var alpha = 1;

var refs = {
  "referents": [r1, r2, r3, r4, r5, rU],
  "probabilities": [50, 50, 50, 50, 50, 10]
};

var cont1 = [[r1,r2,r3,r4,r5]]

var globalContext = cont1[0]

var cont2 = [

    [r1], [r2], [r3], [r4], [r5],

    [r1, r2],
    [r1, r3],
    [r1, r4],
    [r1, r5],
    [r2, r3],
    [r2, r4],
    [r2, r5],
    [r3, r4],
    [r3, r5],
    [r4, r5],

    [r1, r2, r3],
    [r1, r2, r4],
    [r1, r2, r5],
    [r1, r3, r4],
    [r1, r3, r5],
    [r1, r4, r5],
    [r2, r3, r4],
    [r2, r3, r5],
    [r2, r4, r5],
    [r3, r4, r5],

    [r1, r2, r3, r4],
    [r1, r2, r3, r5],
    [r1, r2, r4, r5],
    [r1, r3, r4, r5],
    [r2, r3, r4, r5],

    [r1,r2,r3,r4,r5]
]



var conts = function(cont) {
  if (cont == "no-cc") {
    return cont1
  }
  else {
    return cont2
  }
}

var contexts = conts(cont)

var thresholds = ["0", "1", "2", "3"]

var thres = {
  "thresholds": ["0", "1", "2", "3"],
  "probabilities": [10, 60, 60, 10]
};


var thresholdsPrior = function() {
    return categorical(thres.probabilities, thres.thresholds)
}  //make this not uniform



// Functions //

var randomVariablePrior = function() {
   return uniformDraw(randomVariable);
} // this is not a distribution in webppl. if i want to sample() from this i have to use the infer wrapping here

var referentsPrior = function() {
  return categorical(refs.probabilities, refs.referents);
};

var thresholdPriorGivenContext  = function(context,description,scope_pos) {

    var cc = function(context, description,scope_pos){      
	if (scope_pos == "high"){ 
	    return filter(function(rf){
		rf[1] == description[2]  & 
		    rf[0] == description[0] 
	    }, context) 
	}
	else {
    	    return filter(function(rf){
		rf[1] == description[2] 
	    }, context) 
	}
    };
    
    var result = cc(context, description, scope_pos)
    // subset of the context with same inner noun
    var getThres = map(function(result){ return result[2] }, result )
    var extendThres = getThres.slice(0)
    extendThres.push(extendThres[0] - 1)
    var finalThres = (allowUninformativeThresholds=="allow") ? extendThres :
	((allowUninformativeThresholds=="lastresort") & (getThres.length == 1)) ?
	extendThres : getThres 

    Infer({method: "enumerate"}, function() {
	uniformDraw(finalThres)
    });
    
};


var referentsPriorGivenContext = function(context) {
  return Infer({method: "enumerate"}, function() {
     flip(0.01) ? rU : uniformDraw(context)
  });
};

var contextsPrior = function() {
     return uniformDraw(contexts);
}  


var contextsPriorLevyStyle = function(refs) {
    var mygamma = (cont == "no-cc") ? 1 : gamma
    Infer({method: "enumerate"}, function() {
	var filtered = filter(function(rf) {
	    // flip a gamma-weighted coin for each referent
	    // to decide whether to include it in the context or not
	    flip(mygamma)
	}, refs)
	// make sure every context has at least one element
	// if we don't this we don't get a well-defined distribution
	condition(filtered.length>0)  
	return (filtered)
    })
}

var priorContextLevyStyle = contextsPriorLevyStyle(globalContext)

var fitsFirstNoun = function(description,context) {
    var filtered = filter(function(ref) {
	description[0]==ref[0]
    }, context)
    return (context.length == filtered.length)
}



// ---------Begin old skewed context distribution calculation-----------

// var max_number_of_elements = 5

// var priorDistribution = function(contexts, skewedness) {
  
//   var beta_dist =  Beta({a: skewedness, b: 1})
//   var context_length = max_number_of_elements
// //   var readout_values = _.range(0, context_length) // get the array
// //   var readout_values = map(function(x) { return x / (context.length-1); }, readout_values); // normalize it 
// //   readout_values[0] = 0.00001 //this doesn't work
// //   readout_values[context_length-1] = 0.99999 //this doesn't work
  
//   var readout_values = [0.00001,0.25,0.5,0.75,0.999999] // this should be an array of length 'number of elements in the biggest context possible'
//   // that evenly spans the range from 0 to 1 (but excluding 0 and 1)
  
//   var unnormalized_p = map(function(x) { return Math.exp(beta_dist.score(x)); }, readout_values);
  
//   var categorical_p_unnormalized = map(function(set) {unnormalized_p[set.length-1]}, contexts)
//   var categorical_p_normalized = map(function(x) { return x / sum(categorical_p_unnormalized); }, categorical_p_unnormalized);
  
//   return Categorical({ps: categorical_p_normalized, vs: contexts})
// }
// // renormalize because it does not sum up to 1

// var priorContextSkewed = priorDistribution(contexts, 2)

// ------End old skewed context distribution calculation---------

var descriptionPrior = function() {
    var uttProbs = map(function(u) {
	var uKey = typeof u == "string" ? u : u[0] + " " + u[1] + " " + u[2];
        return Math.exp(-(costCoefficient*cost[uKey]))
  }, descriptions);
    return categorical(uttProbs, descriptions);
};

// var thresholdsPrior = function() {
//     return uniformDraw(thrs);
// }  //make this not uniform

var pragmaticListenerFullDescription = function(description) {
    return Infer({method: "enumerate"}, function() {
	var context = contextsPrior(); 
	var referent = referentsPrior();
	// var referent = sample(referentsPriorGivenContext(context));
	//var theta = sample(thresholdPriorGivenContext(context,description));
	//var theta = uniformDraw([0,1,2,3])
	factor(speaker(referent, context, theta).score(description));
	// condition(referent[0]=="rabbit")
	return {thet: theta, cont: context, ref: referent}; 
    });
};

var descriptionPrior1 = function() {
    return uniformDraw(descriptions);
};


var literalListener = function(description, context, theta, scope_cmp, scope_pos) {
    return Infer({method: "enumerate"}, function() {
	var referent = referentsPrior();
  	condition(meaning(description, referent, theta, context, def_art, scope_cmp, scope_pos))
	//testing old meaning
	//condition(meaning1(description, referent, context, theta, context))
	return referent;
    });
}

var speaker = function(referent, context, theta, scope_cmp, scope_pos) {
    return Infer({method: "enumerate"}, function() {
	var description = descriptionPrior();
	factor( alpha * literalListener(description, context, theta, scope_cmp, scope_pos).score(referent));
	return description;
    });
}


var pragmaticListener = function() {
    return Infer({method: "enumerate"}, function() {
	var description = randomVariablePrior();
	//var context = sample(priorContextSkewed);
	var context = sample(priorContextLevyStyle);
	// condition(fitsFirstNoun(description,context)) //"incremental" listener
	//var context = contextsPrior(); 
	var referent = sample(referentsPriorGivenContext(context));
	var scope_cmp = sample(Infer({method: "enumerate"}, function() {
	    if (def_art=="standard") {
		"low"
	    } else {
		flip(cmpHighScopeConstrualProb) ? "high" : "low"
	    }
	}))
	var scope_pos = sample(Infer({method: "enumerate"}, function() {
	    flip(posHighScopeConstrualProb) ? "high" : "low"
	}))
	var theta = sample(thresholdPriorGivenContext(context, description, scope_pos));
	//var theta = uniformDraw([0,1,2,3]);
	var speakerdist = speaker(referent, context, theta, scope_cmp, scope_pos);
	//display(speakerdist);
	factor(speakerdist.score(description));
	condition(referent[0]=="rabbit")
	return {thet: theta, cont: context, ref: referent}; 
    });
}


var pragmaticListenerFullDescription = function(description) {
    display("pragmaticListenerFullDescription " + description)
    return Infer({method: "enumerate"}, function() {
	//var context = contextsPrior();
	var context = sample(priorContextLevyStyle);
	//var referent = referentsPrior();
	var referent = sample(referentsPriorGivenContext(context));
	var scope_cmp = sample(Infer({method: "enumerate"}, function() {
	    if (def_art=="standard") {
		"low"
	    } else {
		flip(cmpHighScopeConstrualProb) ? "high" : "low"
	    }
	}))
	var scope_pos = sample(Infer({method: "enumerate"}, function() {
	    flip(posHighScopeConstrualProb) ? "high" : "low"
	}))
	var theta = sample(thresholdPriorGivenContext(context, description, scope_pos));
	var speakerdist = speaker(referent, context, theta);
	//display(speakerdist);
	factor(speakerdist.score(description));
	// condition(referent[0]=="rabbit")
	return {thet: theta, cont: context, ref: referent}; 
    });
}


var speaker1 = function(referent) {
    display("speaker1 " + referent)
    return Infer({method: "enumerate"}, function() {
	var description = descriptionPrior();
	factor( alpha * marginalize(pragmaticListenerFullDescription(description),"ref").score(referent));
	return description;
    });
}



var pragmaticListener2 = function() {
    display("pragmaticListener2")
    return Infer({method: "enumerate"}, function() {
	var description = randomVariablePrior();
	// var context = contextsPrior(); 
	// var referent = sample(referentsPriorGivenContext(context));
	//     display(JSON.stringify(referent))
	// var theta = sample(tresholdPriorGivenContext(context,description)); 
	var referent = referentsPrior();
	factor(speaker1(referent).score(description));
	condition(referent[0]=="rabbit")
	return {ref: referent}; 
    });
}





// Main


var doPragmaticListener = function(description,level) {

    display(model_data)

    if (level == 2) {
	return (pragmaticListener2(description))
    } else {
	return (pragmaticListener(description))
    }
}


var pragListener = doPragmaticListener(["rabbit","adjective","silence"], listenerLevel)

//display(pragListener)

marginalize(pragListener, "ref")

