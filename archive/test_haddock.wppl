// test

var r1 = ["rabbit", "bag", 1]
var r2 = ["rabbit", "bag", 2]
var r3 = ["frog", "bag", 3]
var r4 = ["frog", "box", 1]
var r5 = ["rabbit", "box", 2]
var rU = ["", "", ""]

var referents = [r1, r2, r3, r4, r5, rU]

var alpha = 1;

// var descriptions = [["rabbit","big","bag"],["rabbit","big","box"],["rabbit","bigger","bag"],["rabbit","bigger","box"],["rabbit","small","bag"],["rabbit","small","box"],["rabbit","smaller","bag"],["rabbit","smaller","box"],["rabbit","empty","bag"],["rabbit","empty","box"],["frog","bigger","box"],["frog","small","box"],["frog","empty","box"],["frog","bigger","basket"],["frog","small","basket"],["frog","empty","basket"],["none","none","none"]];

//Removing bigger and smaller and adding a bunch of pos form descriptions

var descriptions = [ 
//["rabbit","smaller","bag"],["rabbit","smaller","box"],["rabbit","bigger","bag"],["rabbit","bigger","box"],
["frog", "big", "basket"],["frog", "empty", "bag"],["frog", "big", "bag"],["frog", "small", "bag"],["rabbit","big","bag"],["rabbit","big","box"],["rabbit","small","bag"],["rabbit","small","box"],["rabbit","empty","bag"],["rabbit","empty","box"],["frog","small","box"],["frog","empty","box"],["none","none","none"]];
// ok this gives me right output after removing comparative. Tomorrow check that after including comparative probabilities go down again
// Could add more baket utterances




// ["frog","bigger","box"],
// ["frog","bigger","basket"],


var randomVariable = [["rabbit","big","box"],["rabbit","big","bag"]];

var randomVariablePrior = function() {
   return uniformDraw(randomVariable);
} // this is not a distribution in webppl. if i want to sample() from this i have to use the infer wrapping here


var refs = {
  "referents": [r1, r2, r3, r4, r5, rU],
  "probabilities": [50, 50, 50, 50, 50, 10]
};

var referentsPrior = function() {
  return categorical(refs.probabilities, refs.referents);
};

var cont1 =[[r1,r2,r3,r4,r5]]
var cont2 =[
[r1],[r2],[r3],[r4],[r5],
[r1,r2],
[r1,r3],
[r1,r4],
[r1,r5],
[r2,r3],
[r2,r4],
[r2,r5],
[r3,r4],
[r3,r5],
[r4,r5],

[r1,r2,r3],
[r1,r2,r4],
[r1,r2,r5],
[r1,r3,r4],
[r1,r3,r5],
[r1,r4,r5],
[r2,r3,r4],
[r2,r3,r5],
[r2,r4,r5],
[r3,r4,r5],

[r1,r2,r3,r4],
[r1,r2,r3,r5],
[r1,r2,r4,r5],
[r1,r3,r4,r5],
[r2,r3,r4,r5],

[r1,r2,r3,r4,r5]
              ]


var conts = function(cont) {
    display("cont: " + cont)
    if (cont == "no-cc") {
    return cont1
  }
  else {
    return cont2
  }
}

var contexts = conts("cc")

// display(contexts)

var thresholds = ["0", "1", "2", "3"]


var thres = {
  "thresholds": ["0", "1", "2", "3"],
  "probabilities": [10, 60, 60, 10]
};


var thresholdsPrior = function() {
    return categorical(thres.probabilities, thres.thresholds)
}  //make this not uniform

var cost = {
  "rabbit bigger bag": 1.5,
  // "frog bigger basket": 1.5,
  "rabbit bigger box": 1.5,
  // "frog bigger box": 1.5,
  "rabbit smaller bag": 1.5,
  // "frog smaller basket": 1.5,
  "rabbit smaller box": 1.5,
  // "frog smaller box": 1.5,
  "rabbit big bag": 1,
  "frog big basket": 1,
  "rabbit big box": 1,
  "frog big box": 1,
  "rabbit small bag": 1,
  "frog small basket": 1,
  "rabbit small box": 1,
  "frog small box": 1,
  "frog small bag": 1,
  "frog big bag": 1,
  "rabbit empty bag": 0.5,
  "frog empty box": 0.5,
  "frog empty basket": 0.5,
  "frog empty bag": 0.5,
  "rabbit empty box": 0.5,
  "none none none": 0,
};


// Functions //

var randomVariablePrior = function() {
   return uniformDraw(randomVariable);
} // this is not a distribution in webppl. if i want to sample() from this i have to use the infer wrapping here

var referentsPrior = function() {
  return categorical(refs.probabilities, refs.referents);
};

var thresholdPriorGivenContext  = function(context,description) {
    
    var cc = function(context, description){
    filter(function(rf){
    rf[1] == description[2]
    }, context) 
    };
  var result = cc(context,description);
    return Infer({method: "enumerate"}, function() {
      var getThres = map(function(result){ return result[2] }, result )
      // var extendThres = getThres.slice(0)
      // extendThres.push(extendThres[0] - 1) 
      // var addThres = getThres.length == 1 ? extendThres : getThres
      uniformDraw(getThres)

  });
};

// var thresholdPriorGivenContext  = function(context,description) {
    
//   var cc = function(context, description){
//     filter(function(rf){
//     rf[1] == description[2]
//     }, context) 
//     };
//   var result = cc(context,description);
//     return Infer({method: "enumerate"}, function() {
//       var getThres = map(function(result){ return result[2] }, result )
//       var extendThres = getThres.slice(0)
//       extendThres.push(extendThres[0] - 1) 
//       uniformDraw(extendThres)
//   });
// };


var referentsPriorGivenContext = function(context) {
  return Infer({method: "enumerate"}, function() {
     flip(0.01) ? rU : uniformDraw(context)
  });
};

var contextsPrior = function() {
    return uniformDraw(contexts);
}

var contextsPriorUniform = function() {
  return Infer({method: "enumerate"}, function() {
    uniformDraw(contexts);
  });
};


// var ContextsPriorWeighted  = function() {
//     return Infer({method: "enumerate"}, function() {
//       var ref = referentsPrior(); 
//       var cont1 = contextsPrior(); 
//         var blah = function(ref,cont1) {
//           var includes = find(function(x) { return x == ref }, cont1) 
//           var inclusion = includes == ref ? true : false
//           return  inclusion//flip(0.000001) ? inclusion == true  : false
//         }
//      condition(blah(ref,cont1)==true)
//      return cont1
//   });
// }

var max_number_of_elements = 5

var priorDistribution = function(contexts, skewedness) {
  
  var beta_dist =  Beta({a: skewedness, b: 1})
  var context_length = max_number_of_elements
//   var readout_values = _.range(0, context_length) // get the array
//   var readout_values = map(function(x) { return x / (context.length-1); }, readout_values); // normalize it 
//   readout_values[0] = 0.00001 //this doesn't work
//   readout_values[context_length-1] = 0.99999 //this doesn't work
  
  var readout_values = [0.00001,0.25,0.5,0.75,0.999999] // this should be an array of length 'number of elements in the biggest context possible'
  // that evenly spans the range from 0 to 1 (but excluding 0 and 1)
  
  var unnormalized_p = map(function(x) { return Math.exp(beta_dist.score(x)); }, readout_values);
  
  var categorical_p_unnormalized = map(function(set) {unnormalized_p[set.length-1]}, contexts)
  var categorical_p_normalized = map(function(x) { return x / sum(categorical_p_unnormalized); }, categorical_p_unnormalized);
  
  return Categorical({ps: categorical_p_normalized, vs: contexts})
}

var priorContextSkewed = priorDistribution(contexts, 1)


var descriptionPrior = function() {
  var uttProbs = map(function(u) {
    var uKey = typeof u == "string" ? u : u[0] + " " + u[1] + " " + u[2];
         return Math.exp(-cost[uKey])
  }, descriptions);
    return categorical(uttProbs, descriptions);
};


var pragmaticListenerFullDescription = function(description) {
  return Infer({method: "enumerate"}, function() {
    var context = contextsPrior(); 
    var referent = referentsPrior();
    // var referent = sample(referentsPriorGivenContext(context));
    var theta = sample(thresholdPriorGivenContext(context,description)); 
    factor(speaker(referent, context, theta).score(description));
    // condition(referent[0]=="rabbit")
    return {thet: theta, cont: context, ref: referent}; 
  });
};

var descriptionPrior1 = function() {
return uniformDraw(descriptions);
};

var thresholdsPrior = function() {
    return uniformDraw(thresholds);
}



//// Meaning Function ////

// Positive Function


// var positiveStand = function(description, referent, all_referents, theta, context) {

//   var innerMatch = function(referent) {

//     var sameContainer = description[2] == referent[1] ? true : false
//     return sameContainer == true 

//   }

//   var truthFn = function(referent) {

//     var includes = find(function(x) {return x == referent}, context) 
//     var inclusion = includes == referent ? true : false
//     var sameNoun = description[0] == referent[0] ? true : false
//     var threshold =  description[1] == "empty" ? true: description[1] == "big" ? referent[2] > theta : description[1] == "small" ? referent[2] <= theta : false

//     return inclusion == true && sameNoun == true && threshold == true && innerMatch(referent)== true && sum(map(innerMatch, all_referents))==1

//   }

//   return (truthFn(referent) && sum(map(truthFn, all_referents))==1) || _.isEqual(description, ["none", "none", "none"]) || _.isEqual(referent, rU)

// }

var positiveStand = function(description, referent, all_referents, theta, context) {

    
    var innerMatch = function(referent) {
	var includes = find(function(x) { return x == referent }, context) 
	// display(includes)
	var inclusion = includes == referent ? true : false 
	// display(inclusion)
	var sameContainer = description[2] == referent[1] ? true : false 
	// display(sameContainer)
	var threshold =  description[1] == "empty" ? true : description[1] == "big" ? referent[2] > theta : description[1] == "small" ? referent[2] <= theta : false 
	//       display(threshold)
	inclusion == true && sameContainer == true && threshold == true
    }
    
    var truthFn = function(referent){
	
	var includes = find(function(x) { return x == referent }, context) 
	// display(includes)
	var inclusion = includes == referent ? true : false 
	// display(inclusion)
	var sameNoun = description[0] == referent[0]  ? true : false 
	// display(sameNoun)
	
	innerMatch(referent)==true && sum(map(innerMatch, all_referents))==1 && sameNoun == true && inclusion == true
    }

    var trivially_true = _.isEqual(description, ["none", "none", "none"]) || _.isEqual(referent, rU)

    var nontrivially_true = (truthFn(referent) && sum(map(truthFn, all_referents))==1)

    // if (nontrivially_true) {
    // 	display("referent")
    // 	display(referent)
    // 	display("context")
    // 	display(context)
    // 	display("\n")
    // }
    
    return trivially_true || nontrivially_true

}


var positiveBum = function(description, referent, all_referents, theta, context) {

  var innerMatch = function(referent) {

    var sameContainer = description[2] == referent[1] ? true : false
    return sameContainer == true 

  }

  var truthFn = function(referent) {

    var includes = find(function(x) {return x == referent}, context) 
    var inclusion = includes == referent ? true : false
    var sameNoun = description[0] == referent[0] ? true : false
    var threshold =  description[1] == "empty" ? true: description[1] == "big" ? referent[2] > theta : description[1] == "small" ? referent[2] <= theta : false

    return inclusion == true && sameNoun == true && threshold == true && innerMatch(referent)

  }

  return (truthFn(referent) && sum(map(truthFn, all_referents))==1) || _.isEqual(description, ["none", "none", "none"]) || _.isEqual(referent, rU)

}


var positiveMeaning = "bumford"

var pos = function(positiveMeaning) {
    if (positiveMeaning == "standard") {
	display("Using standard meaning")
	return positiveStand
    }
    else {
	display("Using Bumford meaning")
	return positiveBum
    }
}


var positive = pos(positiveMeaning)



// Comparative Function
var comparative = function(description, referent, all_referents, theta, context) {
  var innerMatch = function(referent) {
    var sameContainer = description[2] == referent[1] ? true : false
    return sameContainer == true
  }
  var truthFn = function(referent) {
    var includes = find(function(x) { return x == referent }, context) 
    var inclusion = includes == referent ? true : false 
    var sameNoun = description[0] == referent[0]  ? true : false 
    return sameNoun == true && inclusion == true && innerMatch(referent)
  }
  var cardinalityCheck = function(scope) {
    if (scope == "low") {
      return description[1] == "empty" ? true : description[1] == "bigger" ? sum(map(innerMatch, all_referents)) == 2 : false
    } 
    else {
      return description[1] == "empty" ? true : description[1] == "bigger" ? sum(map(truthFn, all_referents)) == 2 : false
    }
  }
  var thresholdFn = function(referent, scope) {
    var threshold =  description[1] == "empty" ? true : description[1] == "bigger" ? referent[2] > theta : description[1] == "smaller" ? referent[2] <= theta : false
    return (threshold == true && cardinalityCheck(scope) == true && truthFn(referent)) || _.isEqual(description, ["none", "none", "none"]) || _.isEqual(referent, rU)
  }
  return sample(Infer({method: "enumerate"}, function() {flip(0.05) ? thresholdFn(referent, "low") : thresholdFn(referent, "high")}))
  
}

var meaning = function(description, referent, all_referents, theta, context) {
    var adjective = description[1]
    if (adjective.substr(-2) == "er") {
	return comparative(description, referent, all_referents, theta, context)
    }
    else {
	return positive(description, referent, all_referents, theta, context)
    }
}

var meaning1 = function(description, referent, all_referents, theta, context) {
    var truthFn = function(referent){
	var includes = find(function(x) { return x == referent }, context)
	// display(includes)
	var inclusion = includes == referent ? true : false
	// display(inclusion)
	var sameNoun = description[0] == referent[0]  ? true : false
	// display(sameNoun)
	var sameContainer = description[2] == referent[1] ? true : false
	// display(sameContainer)
	var threshold =  description[1] == "empty" ? true: description[1] == "big" ? referent[2] > theta : description[1] == "small" ? referent[2] <= theta : false
	//       display(threshold)
	sameNoun == true && sameContainer == true && threshold == true && inclusion == true
    }

    var trivially_true = _.isEqual(description, ["none", "none", "none"]) || _.isEqual(referent, rU)
    
    var nontrivially_true = (truthFn(referent) && sum(map(truthFn, all_referents))==1)
 
    var return_value = trivially_true || nontrivially_true

    // if (nontrivially_true) {
    // 	display("referent: " + referent)
    // 	display("context: ")
    // 	display(context)
    // 	display("\n")
    // }
    
    return return_value
}

//// End of Meaning Function ////


var literalListener = function(description, context, theta) {
    return Infer({method: "enumerate"}, function() {
    var referent = referentsPrior();
    var all_referents = context; 
    condition(meaning(description, referent, all_referents, theta, context))
    return referent;
  });
}

var speaker = function(referent, context, theta) {
  return Infer({method: "enumerate"}, function() {
    var description = descriptionPrior();
    factor( alpha * literalListener(description, context, theta).score(referent));
    return description;
  });
}

var pragmaticListener = function(description) {
  return Infer({method: "enumerate"}, function() {
    var description = randomVariablePrior();
    var context = sample(priorContextSkewed); 
    var referent = sample(referentsPriorGivenContext(context));
    var theta = sample(thresholdPriorGivenContext(context,description)); 
    factor(speaker(referent, context, theta).score(description));
    condition(referent[0]=="rabbit")
    return {thet: theta, cont: context, ref: referent}; 
  });
}


var pragmaticListenerFullDescription = function(description) {
  return Infer({method: "enumerate"}, function() {
    var context = contextsPrior(); 
    var referent = referentsPrior();
    // var referent = sample(referentsPriorGivenContext(context));
    var theta = sample(thresholdPriorGivenContext(context,description)); 
    factor(speaker(referent, context, theta).score(description));
    // condition(referent[0]=="rabbit")
    return {thet: theta, cont: context, ref: referent}; 
  });
}


var speaker1 = function(referent) {
  return Infer({method: "enumerate"}, function() {
    var description = descriptionPrior1();
    // display(description)
    factor( alpha * marginalize(pragmaticListenerFullDescription(description),"ref").score(referent));
    return description;
  });
}



var pragmaticListener2 = function(description) {
  return Infer({method: "enumerate"}, function() {
    var description = randomVariablePrior();
    // var context = contextsPrior(); 
    // var referent = sample(referentsPriorGivenContext(context));
//     display(JSON.stringify(referent))
    // var theta = sample(tresholdPriorGivenContext(context,description)); 
    var referent = referentsPrior();
    factor(speaker1(referent).score(description));
    condition(referent[0]=="rabbit")
    return referent; 
  });
}



// Main


// thresholdPriorGivenContext([r1,r2,r3,r4,r5], ["rabbit","big","bag"])

// positive(["rabbit","big","bag"], r2, [r1,r2,r3,r4,r5], 1, [r1,r2,r3,r4,r5])

// positive(["rabbit","big","bag"], r1, [r1,r2,r3], 0, [r1,r2,r3])

// literalListener(["rabbit","big","bag"],[r1,r2],1)

// literalListener(["rabbit","big","bag"],[r1,r2,r3,r4,r5],1)

// pragmaticListener(["rabbit","big","bag"]) //for tomorrow check what happens in condition 1 for this instruction. DO I have similations for this??

// meaning(["rabbit","big","box"], r5, [r1,r2,r3,r4,r5], 1, [r1,r2,r3,r4,r5]) 
// thresholdPriorGivenContext([r1,r2],["rabbit","big","bag"])

// speaker1(r2)
// 
// pragmaticListener(["rabbit","big","silence"])
//TODO: compress 4 models in one single script, add script with pragmaticlistener2 to repository


//var speaker = function(referent, context, theta) 
//speaker(r1,[r1,r4,r5],0)

//marginalize(pragmaticListener(["rabbit","big","silence"]), "ref")

//pragmaticListener(["rabbit","big","silence"])

var cont = "cc"

// var myContextsPrior = function(refs) {
//     var gamma = (cont == "no-cc") ? 1 : 0.95
//     Infer({method: "enumerate"}, function() {
// 	filter(function(rf) {
// 	    flip(gamma)
// 	}, refs)

//     })
// }


var contextsPriorLevyStyle = function(refs) {
    var gamma = (cont == "no-cc") ? 1 : 0.95
    Infer({method: "enumerate"}, function() {
	var filtered = filter(function(rf) {
	    flip(gamma)
	}, refs)
	condition(filtered.length>0)
	return (filtered)
    })
}

contextsPriorLevyStyle([r1,r2,r3])
